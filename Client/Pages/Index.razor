@page "/"
@inject HttpClient Http

<PageTitle>Todo List</PageTitle>

@if (_todoItems == null)
{
    <MudText><em>Loading...</em></MudText>
}
else
{
    <MudContainer Class="pa-5 border">
      <MudText Typo="Typo.h4">New Item</MudText>
      <TodoItemForm OnItemAdded="@ItemsChanged" />
    </MudContainer>
    <MudContainer Class="pa-5 mt-5 border">
        <MudStack Justify="Justify.Center">
            @foreach (var todo in _todoItems)
            {
              <MudStack Row="true" Class="mb-3" AlignItems="AlignItems.Center">
                @if (ItemClass(todo) == "item-completed")
                {
                  <MudText Style="width: 280px; text-decoration: line-through; color: #ccc;">@todo.Text</MudText>
                }
                else 
                {
                  <MudText Style="width: 280px;">@todo.Text</MudText>
                }
                @* <MudText Class="@ItemClass(todo)" Style="width: 280px;">@todo.Text</MudText> *@
                @if (todo.Completed)
                {
                    <MudContainer Style="width: 120px">
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => UncompleteItem(todo))">Uncomplete</MudButton>
                    </MudContainer>
                }
                @if (!todo.Completed)
                {
                    <MudContainer Style="width: 120px">
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => CompleteItem(todo))">Complete</MudButton>
                    </MudContainer>
                }
                <MudContainer>
                  <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteItem(todo))">Delete</MudButton>
                </MudContainer>
              </MudStack>
            }
        </MudStack>
    </MudContainer>
}

@code {
  private TodoItem[]? _todoItems;

  protected override async Task OnInitializedAsync()
  {
    _todoItems = await Http.GetFromJsonAsync<TodoItem[]>("Todo");
    foreach(var item in _todoItems)
    {
      Console.WriteLine(item.Id);
    }
  }

  public async void ItemsChanged()
  {
    _todoItems = await Http.GetFromJsonAsync<TodoItem[]>("Todo");

    StateHasChanged();
  }

  public async void DeleteItem(TodoItem item)
  {
    await Http.DeleteAsync($"Todo/{item.Id}");
    ItemsChanged();
  }

  public async void CompleteItem(TodoItem item)
  {
    Console.WriteLine(item.Id.GetType());
    Console.WriteLine(item.Id);
    @* var itemData = new {Id = item.Id}; *@
    await Http.PostAsJsonAsync("Todo/complete", item);
    ItemsChanged();
  }

  public async void UncompleteItem(TodoItem item)
  {
    await Http.PostAsJsonAsync("Todo/uncomplete", item);
    ItemsChanged();
  }

  public string ItemClass(TodoItem item)
  {
    return item.Completed ? "item-completed" : "";
  }
}